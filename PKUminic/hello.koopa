decl @getint(): i32
decl @getch(): i32
decl @starttime()
decl @stoptime()
decl @putint(i32)
decl @putch(i32)
decl @getarray(*i32): i32
decl @putarray(i32, *i32)

global @n1 = alloc i32, zeroinit

fun @QuickSort(%arr : *i32, %low : i32, %high : i32): i32 {
%entry: 
  @arr1 = alloc *i32
  store %arr, @arr1
  @low1 = alloc i32
  store %low, @low1
  @high1 = alloc i32
  store %high, @high1
  %0 = load @low1
  %1 = load @high1
  %2 = lt %0, %1
  br %2, %then_0, %end_0

%then_0: 
  @i1 = alloc i32
  %3 = load @low1
  store %3, @i1
  @j1 = alloc i32
  %4 = load @high1
  store %4, @j1
  @k1 = alloc i32
  %5 = load @arr1
  %7 = load @low1
  %6 = getptr %5, %7
  %8 = load %6
  store %8, @k1
  jump %while_cond_0

%while_cond_0: 
  %9 = load @i1
  %10 = load @j1
  %11 = lt %9, %10
  br %11, %while_body_0, %while_end_0

%while_body_0: 
  jump %while_cond_1

%while_cond_1: 
  @void = alloc i32
  @int = alloc i32
  %12 = load @i1
  %13 = load @j1
  %14 = lt %12, %13
  %15 = eq 0, %14
  store 0, @void
  br %15, %and_end_2, %and_right_2

%and_right_2:
  %16 = load @arr1
  %18 = load @j1
  %17 = getptr %16, %18
  %19 = load %17
  %20 = load @k1
  %21 = sub %20, 1
  %22 = gt %19, %21
  %23 = ne 0, %22
  store %23, @void
  jump  %and_end_2

%and_end_2:
  %24= load @void
  br %24, %while_body_1, %while_end_1

%while_body_1: 
  %25 = load @j1
  %26 = sub %25, 1
  store %26, @j1
  jump %while_cond_1

%while_end_1: 
  %27 = load @i1
  %28 = load @j1
  %29 = lt %27, %28
  br %29, %then_1, %end_1

%then_1: 
  %30 = load @arr1
  %32 = load @j1
  %31 = getptr %30, %32
  %33 = load %31
  %34 = load @arr1
  %36 = load @i1
  %35 = getptr %34, %36
  store %33, %35
  %37 = load @i1
  %38 = add %37, 1
  store %38, @i1
  jump %end_1

%end_1: 
  jump %while_cond_2

%while_cond_2: 
  %39 = load @i1
  %40 = load @j1
  %41 = lt %39, %40
  %42 = eq 0, %41
  store 0, @void
  br %42, %and_end_3, %and_right_3

%and_right_3:
  %43 = load @arr1
  %45 = load @i1
  %44 = getptr %43, %45
  %46 = load %44
  %47 = load @k1
  %48 = lt %46, %47
  %49 = ne 0, %48
  store %49, @void
  jump  %and_end_3

%and_end_3:
  %50= load @void
  br %50, %while_body_2, %while_end_2

%while_body_2: 
  %51 = load @i1
  %52 = add %51, 1
  store %52, @i1
  jump %while_cond_2

%while_end_2: 
  %53 = load @i1
  %54 = load @j1
  %55 = lt %53, %54
  br %55, %then_2, %end_2

%then_2: 
  %56 = load @arr1
  %58 = load @i1
  %57 = getptr %56, %58
  %59 = load %57
  %60 = load @arr1
  %62 = load @j1
  %61 = getptr %60, %62
  store %59, %61
  %63 = load @j1
  %64 = sub %63, 1
  store %64, @j1
  jump %end_2

%end_2: 
  jump %while_cond_0

%while_end_0: 
  %65 = load @k1
  %66 = load @arr1
  %68 = load @i1
  %67 = getptr %66, %68
  store %65, %67
  @tmp1 = alloc i32
  %69 = load @i1
  %70 = sub %69, 1
  store %70, @tmp1
  %71 = load @arr1
  %72 = load @low1
  %73 = load @tmp1
  %74 = call @QuickSort(%71, %72, %73)
  store %74, @tmp1
  %75 = load @i1
  %76 = add %75, 1
  store %76, @tmp1
  %77 = load @arr1
  %78 = load @tmp1
  %79 = load @high1
  %80 = call @QuickSort(%77, %78, %79)
  store %80, @tmp1
  jump %end_0

%end_0: 
  ret 0
}

fun @main(): i32 {
%entry: 
  store 10, @n1
  @a1 = alloc [i32, 10]
  %0 = getelemptr @a1, 0
  store 4, %0
  %1 = getelemptr @a1, 1
  store 3, %1
  %2 = getelemptr @a1, 2
  store 9, %2
  %3 = getelemptr @a1, 3
  store 2, %3
  %4 = getelemptr @a1, 4
  store 0, %4
  %5 = getelemptr @a1, 5
  store 1, %5
  %6 = getelemptr @a1, 6
  store 6, %6
  %7 = getelemptr @a1, 7
  store 5, %7
  %8 = getelemptr @a1, 8
  store 7, %8
  %9 = getelemptr @a1, 9
  store 8, %9
  @i2 = alloc i32
  store 0, @i2
  @tmp2 = alloc i32
  store 9, @tmp2
  %10 = getelemptr @a1, 0
  %11 = load @i2
  %12 = load @tmp2
  %13 = call @QuickSort(%10, %11, %12)
  store %13, @i2
  jump %while_cond_3

%while_cond_3: 
  %14 = load @i2
  %15 = load @n1
  %16 = lt %14, %15
  br %16, %while_body_3, %while_end_3

%while_body_3: 
  @tmp3 = alloc i32
  %17 = load @i2
  %18 = getelemptr @a1, %17
  %19 = load %18
  store %19, @tmp3
  %20 = load @tmp3
  call @putint(%20)
  store 10, @tmp3
  %21 = load @tmp3
  call @putch(%21)
  %22 = load @i2
  %23 = add %22, 1
  store %23, @i2
  jump %while_cond_3

%while_end_3: 
  ret 0
}

